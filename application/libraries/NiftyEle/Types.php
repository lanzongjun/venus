<?php
namespace NiftyEle;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class SkuStatus {
  const UP = 1;
  const DOWN = 0;
  static public $__names = array(
    1 => 'UP',
    0 => 'DOWN',
  );
}

class CustomCat {
  static $_TSPEC;

  /**
   * @var string
   */
  public $custom_cat_name = null;
  /**
   * @var string
   */
  public $custom_cat_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'custom_cat_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'custom_cat_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['custom_cat_name'])) {
        $this->custom_cat_name = $vals['custom_cat_name'];
      }
      if (isset($vals['custom_cat_id'])) {
        $this->custom_cat_id = $vals['custom_cat_id'];
      }
    }
  }

  public function getName() {
    return 'CustomCat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->custom_cat_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->custom_cat_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomCat');
    if ($this->custom_cat_name !== null) {
      $xfer += $output->writeFieldBegin('custom_cat_name', TType::STRING, 1);
      $xfer += $output->writeString($this->custom_cat_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom_cat_id !== null) {
      $xfer += $output->writeFieldBegin('custom_cat_id', TType::STRING, 2);
      $xfer += $output->writeString($this->custom_cat_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShopSku {
  static $_TSPEC;

  /**
   * @var string
   */
  public $sku_id = null;
  /**
   * @var string
   */
  public $upc = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $left_num = null;
  /**
   * @var int
   */
  public $sale_price = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $weight = null;
  /**
   * @var string
   */
  public $custom_sku_id = null;
  /**
   * @var string
   */
  public $custom_cat_ids = null;
  /**
   * @var \NiftyEle\CustomCat[]
   */
  public $custom_cat_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sku_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'upc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'left_num',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'sale_price',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'weight',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'custom_sku_id',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'custom_cat_ids',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'custom_cat_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyEle\CustomCat',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['upc'])) {
        $this->upc = $vals['upc'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['left_num'])) {
        $this->left_num = $vals['left_num'];
      }
      if (isset($vals['sale_price'])) {
        $this->sale_price = $vals['sale_price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
      if (isset($vals['custom_sku_id'])) {
        $this->custom_sku_id = $vals['custom_sku_id'];
      }
      if (isset($vals['custom_cat_ids'])) {
        $this->custom_cat_ids = $vals['custom_cat_ids'];
      }
      if (isset($vals['custom_cat_list'])) {
        $this->custom_cat_list = $vals['custom_cat_list'];
      }
    }
  }

  public function getName() {
    return 'ShopSku';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->upc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->left_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sale_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->custom_sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->custom_cat_ids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->custom_cat_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \NiftyEle\CustomCat();
              $xfer += $elem5->read($input);
              $this->custom_cat_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopSku');
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::STRING, 1);
      $xfer += $output->writeString($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->upc !== null) {
      $xfer += $output->writeFieldBegin('upc', TType::STRING, 2);
      $xfer += $output->writeString($this->upc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->left_num !== null) {
      $xfer += $output->writeFieldBegin('left_num', TType::I64, 4);
      $xfer += $output->writeI64($this->left_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sale_price !== null) {
      $xfer += $output->writeFieldBegin('sale_price', TType::I64, 5);
      $xfer += $output->writeI64($this->sale_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::I32, 7);
      $xfer += $output->writeI32($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom_sku_id !== null) {
      $xfer += $output->writeFieldBegin('custom_sku_id', TType::STRING, 8);
      $xfer += $output->writeString($this->custom_sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom_cat_ids !== null) {
      $xfer += $output->writeFieldBegin('custom_cat_ids', TType::STRING, 9);
      $xfer += $output->writeString($this->custom_cat_ids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom_cat_list !== null) {
      if (!is_array($this->custom_cat_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('custom_cat_list', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->custom_cat_list));
        {
          foreach ($this->custom_cat_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShopSkuList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shop_id = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var \NiftyEle\ShopSku[]
   */
  public $sku_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shop_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sku_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyEle\ShopSku',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['shop_id'])) {
        $this->shop_id = $vals['shop_id'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['sku_list'])) {
        $this->sku_list = $vals['sku_list'];
      }
    }
  }

  public function getName() {
    return 'ShopSkuList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shop_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->sku_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \NiftyEle\ShopSku();
              $xfer += $elem12->read($input);
              $this->sku_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopSkuList');
    if ($this->shop_id !== null) {
      $xfer += $output->writeFieldBegin('shop_id', TType::STRING, 1);
      $xfer += $output->writeString($this->shop_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_list !== null) {
      if (!is_array($this->sku_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sku_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sku_list));
        {
          foreach ($this->sku_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StockUpdateList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shop_id = null;
  /**
   * @var \NiftyEle\StockUpdateUpc[]
   */
  public $update_upc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shop_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'update_upc',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyEle\StockUpdateUpc',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['shop_id'])) {
        $this->shop_id = $vals['shop_id'];
      }
      if (isset($vals['update_upc'])) {
        $this->update_upc = $vals['update_upc'];
      }
    }
  }

  public function getName() {
    return 'StockUpdateList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shop_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->update_upc = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \NiftyEle\StockUpdateUpc();
              $xfer += $elem19->read($input);
              $this->update_upc []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StockUpdateList');
    if ($this->shop_id !== null) {
      $xfer += $output->writeFieldBegin('shop_id', TType::STRING, 1);
      $xfer += $output->writeString($this->shop_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_upc !== null) {
      if (!is_array($this->update_upc)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('update_upc', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->update_upc));
        {
          foreach ($this->update_upc as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StockUpdateUpc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $barcode = null;
  /**
   * @var int
   */
  public $stocks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'barcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'stocks',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['barcode'])) {
        $this->barcode = $vals['barcode'];
      }
      if (isset($vals['stocks'])) {
        $this->stocks = $vals['stocks'];
      }
    }
  }

  public function getName() {
    return 'StockUpdateUpc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->barcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stocks);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StockUpdateUpc');
    if ($this->barcode !== null) {
      $xfer += $output->writeFieldBegin('barcode', TType::STRING, 1);
      $xfer += $output->writeString($this->barcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stocks !== null) {
      $xfer += $output->writeFieldBegin('stocks', TType::I32, 2);
      $xfer += $output->writeI32($this->stocks);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Xception extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $errorNo = null;
  /**
   * @var string
   */
  public $error = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorNo'])) {
        $this->errorNo = $vals['errorNo'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Xception';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Xception');
    if ($this->errorNo !== null) {
      $xfer += $output->writeFieldBegin('errorNo', TType::I32, 1);
      $xfer += $output->writeI32($this->errorNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRING, 2);
      $xfer += $output->writeString($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


