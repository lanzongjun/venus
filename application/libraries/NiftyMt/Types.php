<?php
namespace NiftyMt;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TOrderStatus {
  const SUBMIT = 1;
  const PUSH = 2;
  const RECEIVED = 3;
  const CONFIRM = 4;
  const DELIVERING = 6;
  const ARRIVED = 7;
  const COMPLETE = 8;
  const CANCEL = 9;
  const UNKNOW = -1;
  static public $__names = array(
    1 => 'SUBMIT',
    2 => 'PUSH',
    3 => 'RECEIVED',
    4 => 'CONFIRM',
    6 => 'DELIVERING',
    7 => 'ARRIVED',
    8 => 'COMPLETE',
    9 => 'CANCEL',
    -1 => 'UNKNOW',
  );
}

class Xception extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $errorNo = null;
  /**
   * @var string
   */
  public $error = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorNo'])) {
        $this->errorNo = $vals['errorNo'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Xception';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Xception');
    if ($this->errorNo !== null) {
      $xfer += $output->writeFieldBegin('errorNo', TType::I32, 1);
      $xfer += $output->writeI32($this->errorNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRING, 2);
      $xfer += $output->writeString($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TPullPhoneNumBean {
  static $_TSPEC;

  /**
   * @var int
   */
  public $order_id = null;
  /**
   * @var int
   */
  public $wm_order_id_view = null;
  /**
   * @var int
   */
  public $day_seq = null;
  /**
   * @var string
   */
  public $real_phone_number = null;
  /**
   * @var string
   */
  public $real_order_phone_number = null;
  /**
   * @var string
   */
  public $app_poi_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'wm_order_id_view',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'day_seq',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'real_phone_number',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'real_order_phone_number',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'app_poi_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
      if (isset($vals['wm_order_id_view'])) {
        $this->wm_order_id_view = $vals['wm_order_id_view'];
      }
      if (isset($vals['day_seq'])) {
        $this->day_seq = $vals['day_seq'];
      }
      if (isset($vals['real_phone_number'])) {
        $this->real_phone_number = $vals['real_phone_number'];
      }
      if (isset($vals['real_order_phone_number'])) {
        $this->real_order_phone_number = $vals['real_order_phone_number'];
      }
      if (isset($vals['app_poi_code'])) {
        $this->app_poi_code = $vals['app_poi_code'];
      }
    }
  }

  public function getName() {
    return 'TPullPhoneNumBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->wm_order_id_view);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->real_phone_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->real_order_phone_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_poi_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TPullPhoneNumBean');
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::I64, 1);
      $xfer += $output->writeI64($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wm_order_id_view !== null) {
      $xfer += $output->writeFieldBegin('wm_order_id_view', TType::I64, 2);
      $xfer += $output->writeI64($this->wm_order_id_view);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_seq !== null) {
      $xfer += $output->writeFieldBegin('day_seq', TType::I32, 3);
      $xfer += $output->writeI32($this->day_seq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->real_phone_number !== null) {
      $xfer += $output->writeFieldBegin('real_phone_number', TType::STRING, 4);
      $xfer += $output->writeString($this->real_phone_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->real_order_phone_number !== null) {
      $xfer += $output->writeFieldBegin('real_order_phone_number', TType::STRING, 5);
      $xfer += $output->writeString($this->real_order_phone_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_poi_code !== null) {
      $xfer += $output->writeFieldBegin('app_poi_code', TType::STRING, 6);
      $xfer += $output->writeString($this->app_poi_code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMtShopSKU {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $app_food_code = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $is_sold_out = null;
  /**
   * @var string
   */
  public $zh_name = null;
  /**
   * @var string
   */
  public $sku_id = null;
  /**
   * @var string
   */
  public $spec = null;
  /**
   * @var string
   */
  public $upc = null;
  /**
   * @var int
   */
  public $stock = null;
  /**
   * @var int
   */
  public $weight = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'app_food_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'is_sold_out',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'zh_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sku_id',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'spec',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'upc',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'stock',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'weight',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['app_food_code'])) {
        $this->app_food_code = $vals['app_food_code'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['is_sold_out'])) {
        $this->is_sold_out = $vals['is_sold_out'];
      }
      if (isset($vals['zh_name'])) {
        $this->zh_name = $vals['zh_name'];
      }
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
      if (isset($vals['upc'])) {
        $this->upc = $vals['upc'];
      }
      if (isset($vals['stock'])) {
        $this->stock = $vals['stock'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
    }
  }

  public function getName() {
    return 'TMtShopSKU';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_food_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_sold_out);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zh_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spec);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->upc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->stock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMtShopSKU');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_food_code !== null) {
      $xfer += $output->writeFieldBegin('app_food_code', TType::STRING, 2);
      $xfer += $output->writeString($this->app_food_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_sold_out !== null) {
      $xfer += $output->writeFieldBegin('is_sold_out', TType::I32, 4);
      $xfer += $output->writeI32($this->is_sold_out);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zh_name !== null) {
      $xfer += $output->writeFieldBegin('zh_name', TType::STRING, 5);
      $xfer += $output->writeString($this->zh_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::STRING, 6);
      $xfer += $output->writeString($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      $xfer += $output->writeFieldBegin('spec', TType::STRING, 7);
      $xfer += $output->writeString($this->spec);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->upc !== null) {
      $xfer += $output->writeFieldBegin('upc', TType::STRING, 8);
      $xfer += $output->writeString($this->upc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stock !== null) {
      $xfer += $output->writeFieldBegin('stock', TType::I64, 9);
      $xfer += $output->writeI64($this->stock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::I64, 10);
      $xfer += $output->writeI64($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMtShopSKUList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shop_id = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var \NiftyMt\TMtShopSKU[]
   */
  public $sku_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shop_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sku_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyMt\TMtShopSKU',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['shop_id'])) {
        $this->shop_id = $vals['shop_id'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['sku_list'])) {
        $this->sku_list = $vals['sku_list'];
      }
    }
  }

  public function getName() {
    return 'TMtShopSKUList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shop_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->sku_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \NiftyMt\TMtShopSKU();
              $xfer += $elem5->read($input);
              $this->sku_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMtShopSKUList');
    if ($this->shop_id !== null) {
      $xfer += $output->writeFieldBegin('shop_id', TType::STRING, 1);
      $xfer += $output->writeString($this->shop_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_list !== null) {
      if (!is_array($this->sku_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sku_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sku_list));
        {
          foreach ($this->sku_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMtUpdateStock {
  static $_TSPEC;

  /**
   * @var string
   */
  public $app_food_code = null;
  /**
   * @var string
   */
  public $sku_id = null;
  /**
   * @var string
   */
  public $stock = null;
  /**
   * @var int
   */
  public $is_sold_out = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'app_food_code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sku_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'stock',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_sold_out',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['app_food_code'])) {
        $this->app_food_code = $vals['app_food_code'];
      }
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['stock'])) {
        $this->stock = $vals['stock'];
      }
      if (isset($vals['is_sold_out'])) {
        $this->is_sold_out = $vals['is_sold_out'];
      }
    }
  }

  public function getName() {
    return 'TMtUpdateStock';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_food_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_sold_out);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMtUpdateStock');
    if ($this->app_food_code !== null) {
      $xfer += $output->writeFieldBegin('app_food_code', TType::STRING, 1);
      $xfer += $output->writeString($this->app_food_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::STRING, 2);
      $xfer += $output->writeString($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stock !== null) {
      $xfer += $output->writeFieldBegin('stock', TType::STRING, 3);
      $xfer += $output->writeString($this->stock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_sold_out !== null) {
      $xfer += $output->writeFieldBegin('is_sold_out', TType::I32, 4);
      $xfer += $output->writeI32($this->is_sold_out);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMtUpdateStockList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shop_id = null;
  /**
   * @var \NiftyMt\TMtUpdateStock[]
   */
  public $sku_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shop_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sku_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyMt\TMtUpdateStock',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['shop_id'])) {
        $this->shop_id = $vals['shop_id'];
      }
      if (isset($vals['sku_list'])) {
        $this->sku_list = $vals['sku_list'];
      }
    }
  }

  public function getName() {
    return 'TMtUpdateStockList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shop_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->sku_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \NiftyMt\TMtUpdateStock();
              $xfer += $elem12->read($input);
              $this->sku_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMtUpdateStockList');
    if ($this->shop_id !== null) {
      $xfer += $output->writeFieldBegin('shop_id', TType::STRING, 1);
      $xfer += $output->writeString($this->shop_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_list !== null) {
      if (!is_array($this->sku_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sku_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sku_list));
        {
          foreach ($this->sku_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMtStockStatusUpdateRes {
  static $_TSPEC;

  /**
   * @var \NiftyMt\Xception[]
   */
  public $stock_update = null;
  /**
   * @var \NiftyMt\Xception[]
   */
  public $status_up = null;
  /**
   * @var \NiftyMt\Xception[]
   */
  public $status_down = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stock_update',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyMt\Xception',
            ),
          ),
        2 => array(
          'var' => 'status_up',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyMt\Xception',
            ),
          ),
        3 => array(
          'var' => 'status_down',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftyMt\Xception',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['stock_update'])) {
        $this->stock_update = $vals['stock_update'];
      }
      if (isset($vals['status_up'])) {
        $this->status_up = $vals['status_up'];
      }
      if (isset($vals['status_down'])) {
        $this->status_down = $vals['status_down'];
      }
    }
  }

  public function getName() {
    return 'TMtStockStatusUpdateRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->stock_update = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \NiftyMt\Xception();
              $xfer += $elem19->read($input);
              $this->stock_update []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->status_up = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readListBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $elem25 = new \NiftyMt\Xception();
              $xfer += $elem25->read($input);
              $this->status_up []= $elem25;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->status_down = array();
            $_size26 = 0;
            $_etype29 = 0;
            $xfer += $input->readListBegin($_etype29, $_size26);
            for ($_i30 = 0; $_i30 < $_size26; ++$_i30)
            {
              $elem31 = null;
              $elem31 = new \NiftyMt\Xception();
              $xfer += $elem31->read($input);
              $this->status_down []= $elem31;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMtStockStatusUpdateRes');
    if ($this->stock_update !== null) {
      if (!is_array($this->stock_update)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stock_update', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->stock_update));
        {
          foreach ($this->stock_update as $iter32)
          {
            $xfer += $iter32->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status_up !== null) {
      if (!is_array($this->status_up)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status_up', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->status_up));
        {
          foreach ($this->status_up as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status_down !== null) {
      if (!is_array($this->status_down)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status_down', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->status_down));
        {
          foreach ($this->status_down as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


