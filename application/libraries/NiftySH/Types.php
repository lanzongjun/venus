<?php
namespace NiftySH;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TJobState {
  const BLOCKED = 1;
  const COMPLETE = 2;
  const NONE = 3;
  const NORMAL = 4;
  const PAUSED = 5;
  const ERROR = 6;
  static public $__names = array(
    1 => 'BLOCKED',
    2 => 'COMPLETE',
    3 => 'NONE',
    4 => 'NORMAL',
    5 => 'PAUSED',
    6 => 'ERROR',
  );
}

class ShopPluList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $respcode = null;
  /**
   * @var string
   */
  public $respmsg = null;
  /**
   * @var \NiftySH\ShopPluBean[]
   */
  public $plulist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'respcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'respmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'plulist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftySH\ShopPluBean',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['respcode'])) {
        $this->respcode = $vals['respcode'];
      }
      if (isset($vals['respmsg'])) {
        $this->respmsg = $vals['respmsg'];
      }
      if (isset($vals['plulist'])) {
        $this->plulist = $vals['plulist'];
      }
    }
  }

  public function getName() {
    return 'ShopPluList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->respcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->respmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->plulist = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \NiftySH\ShopPluBean();
              $xfer += $elem5->read($input);
              $this->plulist []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopPluList');
    if ($this->respcode !== null) {
      $xfer += $output->writeFieldBegin('respcode', TType::STRING, 1);
      $xfer += $output->writeString($this->respcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->respmsg !== null) {
      $xfer += $output->writeFieldBegin('respmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->respmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plulist !== null) {
      if (!is_array($this->plulist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('plulist', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->plulist));
        {
          foreach ($this->plulist as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShopPluBean {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orgcode = null;
  /**
   * @var string
   */
  public $plucode = null;
  /**
   * @var string
   */
  public $pluname = null;
  /**
   * @var string
   */
  public $barcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orgcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'plucode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pluname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'barcode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orgcode'])) {
        $this->orgcode = $vals['orgcode'];
      }
      if (isset($vals['plucode'])) {
        $this->plucode = $vals['plucode'];
      }
      if (isset($vals['pluname'])) {
        $this->pluname = $vals['pluname'];
      }
      if (isset($vals['barcode'])) {
        $this->barcode = $vals['barcode'];
      }
    }
  }

  public function getName() {
    return 'ShopPluBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orgcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plucode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pluname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->barcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopPluBean');
    if ($this->orgcode !== null) {
      $xfer += $output->writeFieldBegin('orgcode', TType::STRING, 1);
      $xfer += $output->writeString($this->orgcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plucode !== null) {
      $xfer += $output->writeFieldBegin('plucode', TType::STRING, 2);
      $xfer += $output->writeString($this->plucode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pluname !== null) {
      $xfer += $output->writeFieldBegin('pluname', TType::STRING, 3);
      $xfer += $output->writeString($this->pluname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->barcode !== null) {
      $xfer += $output->writeFieldBegin('barcode', TType::STRING, 4);
      $xfer += $output->writeString($this->barcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShopStocksBatList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var \NiftySH\ShopStocksBean[]
   */
  public $stocksList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'stocksList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NiftySH\ShopStocksBean',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['stocksList'])) {
        $this->stocksList = $vals['stocksList'];
      }
    }
  }

  public function getName() {
    return 'ShopStocksBatList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->stocksList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \NiftySH\ShopStocksBean();
              $xfer += $elem12->read($input);
              $this->stocksList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopStocksBatList');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stocksList !== null) {
      if (!is_array($this->stocksList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stocksList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->stocksList));
        {
          foreach ($this->stocksList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShopStocksBean {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orgcode = null;
  /**
   * @var string
   */
  public $plucode = null;
  /**
   * @var string
   */
  public $kccount = null;
  /**
   * @var string
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orgcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'plucode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'kccount',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orgcode'])) {
        $this->orgcode = $vals['orgcode'];
      }
      if (isset($vals['plucode'])) {
        $this->plucode = $vals['plucode'];
      }
      if (isset($vals['kccount'])) {
        $this->kccount = $vals['kccount'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'ShopStocksBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orgcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plucode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->kccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopStocksBean');
    if ($this->orgcode !== null) {
      $xfer += $output->writeFieldBegin('orgcode', TType::STRING, 1);
      $xfer += $output->writeString($this->orgcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plucode !== null) {
      $xfer += $output->writeFieldBegin('plucode', TType::STRING, 2);
      $xfer += $output->writeString($this->plucode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kccount !== null) {
      $xfer += $output->writeFieldBegin('kccount', TType::STRING, 3);
      $xfer += $output->writeString($this->kccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 4);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetStocksBatBean {
  static $_TSPEC;

  /**
   * @var string
   */
  public $plucode = null;
  /**
   * @var string
   */
  public $orgcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'plucode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'orgcode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['plucode'])) {
        $this->plucode = $vals['plucode'];
      }
      if (isset($vals['orgcode'])) {
        $this->orgcode = $vals['orgcode'];
      }
    }
  }

  public function getName() {
    return 'GetStocksBatBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plucode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orgcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetStocksBatBean');
    if ($this->plucode !== null) {
      $xfer += $output->writeFieldBegin('plucode', TType::STRING, 1);
      $xfer += $output->writeString($this->plucode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orgcode !== null) {
      $xfer += $output->writeFieldBegin('orgcode', TType::STRING, 2);
      $xfer += $output->writeString($this->orgcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShopOrgCodeInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orgcode = null;
  /**
   * @var string
   */
  public $shopname = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orgcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shopname',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orgcode'])) {
        $this->orgcode = $vals['orgcode'];
      }
      if (isset($vals['shopname'])) {
        $this->shopname = $vals['shopname'];
      }
    }
  }

  public function getName() {
    return 'ShopOrgCodeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orgcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopOrgCodeInfo');
    if ($this->orgcode !== null) {
      $xfer += $output->writeFieldBegin('orgcode', TType::STRING, 1);
      $xfer += $output->writeString($this->orgcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopname !== null) {
      $xfer += $output->writeFieldBegin('shopname', TType::STRING, 2);
      $xfer += $output->writeString($this->shopname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Xception extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $errorNo = null;
  /**
   * @var string
   */
  public $error = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorNo'])) {
        $this->errorNo = $vals['errorNo'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Xception';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Xception');
    if ($this->errorNo !== null) {
      $xfer += $output->writeFieldBegin('errorNo', TType::I32, 1);
      $xfer += $output->writeI32($this->errorNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRING, 2);
      $xfer += $output->writeString($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


